<idea-plugin require-restart="true">
  <id>com.sarchuk.atomic</id>
  <name>Atomic</name>
  <version>0.1.2</version>
  <vendor>Iaroslav Sarchuk</vendor>
  <idea-version since-build="241.14494" until-build="251.*" />
  <depends>com.intellij.modules.rider</depends>

  <description>
<![CDATA[
<p><b>Atomic Plugin - Code Generator for Atomic Framework</b></p>
<p>Generate entity API extension methods for the <a href="https://github.com/StarKRE22/Atomic">Atomic Framework</a> - a reactive procedural game framework for C# and Unity.</p>

<h3>About Atomic Framework:</h3>
<p>Atomic is a game development framework that uses Entity-State-Behaviour pattern to reduce complexity in game interactions. It separates data from logic and uses reactive properties for real-time state management.</p>

<h3>Key Features:</h3>
<ul>
  <li>üöÄ <b>Framework Integration</b>: Seamless integration with Atomic Framework entities</li>
  <li>üìù <b>Atomic Files</b>: Custom DSL for defining entity APIs with full IDE support</li>
  <li>‚ö° <b>Auto-Generation</b>: Automatic code generation on file changes</li>
  <li>üéØ <b>Smart Completion</b>: Type and namespace auto-completion with IntelliSense</li>
  <li>üîç <b>Find Usages</b>: Track generated method usage across your project</li>
  <li>‚ôªÔ∏è <b>Refactoring</b>: Rename support with automatic updates</li>
  <li>‚úÖ <b>Validation</b>: Real-time error detection and quick fixes</li>
  <li>üé® <b>Syntax Highlighting</b>: Full language support for .atomic files</li>
</ul>

<h3>Usage:</h3>
<p>Create a new .atomic file (File ‚Üí New ‚Üí Atomic File) and press Ctrl+Shift+G to generate extension methods for your Atomic Framework entities.</p>

<h3>Generated Methods:</h3>
<p>Tags: HasTag, AddTag, DelTag | Values: Get, Set, Add, Has, Del, TryGet, Ref</p>

<h3>Learn More:</h3>
<p>Visit <a href="https://github.com/StarKRE22/Atomic">Atomic Framework Repository</a> for framework documentation.</p>
]]>
  </description>

  <extensions defaultExtensionNs="com.intellij">
    <!-- Atomic Language Support -->
    <fileType
        name="Atomic File"
        implementationClass="com.jetbrains.rider.plugins.atomic.language.AtomicFileType"
        fieldName="INSTANCE"
        language="Atomic"
        extensions="atomic"/>

    <lang.parserDefinition
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.language.AtomicParserDefinition"/>
    
    <!-- Editor Features -->
    <lang.syntaxHighlighterFactory
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.language.AtomicSyntaxHighlighterFactory"/>
    
    <colorSettingsPage
        implementation="com.jetbrains.rider.plugins.atomic.language.AtomicColorSettingsPage"/>
    
    <completion.contributor
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.language.AtomicCompletionContributor"/>
    
    <annotator
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.language.AtomicAnnotator"/>
    
    <lang.findUsagesProvider
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.language.AtomicFindUsagesProvider"/>
    
    <highlightUsagesHandlerFactory
        implementation="com.jetbrains.rider.plugins.atomic.language.AtomicHighlightUsagesHandlerFactory"/>
    
    <annotator
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.language.AtomicTypeHighlightingAnnotator"
        order="after com.jetbrains.rider.plugins.atomic.language.AtomicAnnotator"/>
    
    <lang.foldingBuilder
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.language.AtomicFoldingBuilder"/>
    
    <typedHandler
        implementation="com.jetbrains.rider.plugins.atomic.language.AtomicTypedHandler"/>
    
    <!-- Reference and Usage Search -->
    <psi.referenceContributor
        language="Atomic"
        implementation="com.jetbrains.rider.plugins.atomic.references.AtomicValueReferenceContributor"/>
    
    <referencesSearch
        implementation="com.jetbrains.rider.plugins.atomic.search.AtomicValueUsageSearcher"/>
    
    <referencesSearch
        implementation="com.jetbrains.rider.plugins.atomic.search.AtomicTagUsageSearcher"/>
    
    <lang.findUsagesProvider
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.findUsages.AtomicFindUsagesProvider"/>
    
    <elementDescriptionProvider
        implementation="com.jetbrains.rider.plugins.atomic.findUsages.AtomicElementDescriptionProvider"/>
    
    <!-- Refactoring Support -->
    <lang.refactoringSupport
        language="Atomic"
        implementationClass="com.jetbrains.rider.plugins.atomic.refactoring.AtomicRefactoringSupportProvider"/>
    
    <!-- Element Manipulators -->
    <lang.elementManipulator
        forClass="com.jetbrains.rider.plugins.atomic.psi.AtomicValueItem"
        implementationClass="com.jetbrains.rider.plugins.atomic.refactoring.AtomicValueManipulator"/>
    
    <lang.elementManipulator
        forClass="com.jetbrains.rider.plugins.atomic.psi.AtomicTagItem"
        implementationClass="com.jetbrains.rider.plugins.atomic.refactoring.AtomicTagManipulator"/>
    
    <!-- Rename Processor -->
    <renamePsiElementProcessor
        implementation="com.jetbrains.rider.plugins.atomic.refactoring.AtomicRenameProcessor"/>
    
    <!-- File Editor Listener -->
    <fileEditorManagerListener
        implementation="com.jetbrains.rider.plugins.atomic.listeners.AtomicFileEditorListener"/>
    
    <!-- Startup Activity -->
    <postStartupActivity
        implementation="com.jetbrains.rider.plugins.atomic.startup.AtomicStartupActivity"/>
    
    <!-- Main plugin startup -->
    <postStartupActivity
        implementation="com.jetbrains.rider.plugins.atomic.startup.AtomicPluginStartup"/>
    
    <!-- File watcher startup -->
    <postStartupActivity
        implementation="com.jetbrains.rider.plugins.atomic.startup.AtomicFileWatcher"/>
    
    <!-- File Templates -->
    <fileTemplateGroup
        implementation="com.jetbrains.rider.plugins.atomic.fileTemplates.AtomicFileTemplateProvider"/>
  </extensions>
  
  <applicationListeners>
    <!-- File change listener for automatic regeneration -->
    <listener class="com.jetbrains.rider.plugins.atomic.listeners.AtomicFileChangeListener"
              topic="com.intellij.openapi.vfs.newvfs.BulkFileListener"/>
  </applicationListeners>

  <actions>
    <!-- Generate API from Atomic file -->
    <action id="AtomicPlugin.GenerateApi"
            class="com.jetbrains.rider.plugins.atomic.actions.AtomicGenerateApiAction"
            text="Generate Entity API"
            description="Generate C# API from .atomic file">
      <add-to-group group-id="EditorPopupMenu" anchor="after" relative-to-action="EditorPopupMenu1"/>
      <add-to-group group-id="ProjectViewPopupMenu" anchor="after" relative-to-action="ProjectViewPopupMenuModifyGroup"/>
      <keyboard-shortcut first-keystroke="ctrl shift G" keymap="$default"/>
    </action>
    
    <!-- Find Usages for Atomic Values -->
    <action id="AtomicPlugin.FindUsages"
            class="com.jetbrains.rider.plugins.atomic.actions.AtomicFindUsagesAction"
            text="Find Usages of Generated Methods"
            description="Find usages of generated methods from atomic values">
      <add-to-group group-id="EditorPopupMenu" anchor="after" relative-to-action="FindUsages"/>
      <override-text place="EditorPopupMenu" text="Find Usages"/>
    </action>
    
    <!-- Test Auto Generation Action -->
    <action id="AtomicPlugin.TestAutoGeneration"
            class="com.jetbrains.rider.plugins.atomic.actions.TestAutoGenerationAction"
            text="Test Auto Generation"
            description="Test automatic generation for debugging">
      <add-to-group group-id="EditorPopupMenu" anchor="after" relative-to-action="AtomicPlugin.GenerateApi"/>
      <keyboard-shortcut first-keystroke="ctrl shift T" keymap="$default"/>
    </action>
    
    <!-- Diagnose Auto Generation Action -->
    <action id="AtomicPlugin.DiagnoseAutoGeneration"
            class="com.jetbrains.rider.plugins.atomic.actions.DiagnoseAutoGenerationAction"
            text="Diagnose Auto Generation"
            description="Show diagnostic information for auto generation">
      <add-to-group group-id="EditorPopupMenu" anchor="after" relative-to-action="AtomicPlugin.TestAutoGeneration"/>
      <keyboard-shortcut first-keystroke="ctrl shift D" keymap="$default"/>
    </action>
    
    <!-- Create Atomic File Action -->
    <action id="AtomicPlugin.CreateAtomicFile"
            class="com.jetbrains.rider.plugins.atomic.actions.CreateAtomicFileAction"
            text="Atomic File"
            description="Create new Atomic configuration file">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewFile"/>
    </action>
  </actions>

  <change-notes>
<![CDATA[
<h3>Version 0.1.2 - Improvements and Fixes</h3>
<ul>
  <li>Fixed keyword autocompletion in atomic files that was broken in 0.1.1</li>
  <li>Fixed deprecated addBrowseFolderListener API usage for Rider 2025.2 compatibility</li>
  <li>Fixed file generation to use AddNewItemHelper for proper project integration</li>
  <li>Added smart filtering of already-used keywords in autocompletion</li>
  <li>Added FileSystemManagerAsync for async file operations to prevent RPC timeouts</li>
  <li>Improved async operation handling throughout the plugin</li>
  <li>Enhanced Rider 2025.2 compatibility</li>
</ul>

<h3>Version 0.1.1 - Bug Fixes</h3>
<ul>
  <li>Fixed EDT (Event Dispatch Thread) violations in all action classes</li>
  <li>Added proper ActionUpdateThread declarations for thread safety</li>
  <li>Fixed lifetime management in AtomicGenerationService</li>
  <li>Fixed solution lifetime usage in ProjectManager</li>
  <li>Added plugin verification for multiple Rider versions (2025.1.6, 2025.2.0.1)</li>
</ul>

<h3>Version 0.1.0 - Initial Release</h3>
<ul>
  <li>üéâ Initial release of Atomic plugin for JetBrains Rider</li>
  <li>üéÆ Full support for <a href="https://github.com/StarKRE22/Atomic">Atomic Framework</a> entity API generation</li>
  <li>‚ú® Complete language support for .atomic configuration files</li>
  <li>üîß C# extension method generation for Atomic Framework entities</li>
  <li>üí° Smart code completion for types and namespaces</li>
  <li>üîç Find usages for generated extension methods</li>
  <li>‚ôªÔ∏è Rename refactoring with automatic updates</li>
  <li>‚ö° Automatic regeneration on file changes</li>
  <li>‚úÖ Real-time validation with quick fixes</li>
  <li>üé® Syntax highlighting and code folding</li>
</ul>
]]>
  </change-notes>

</idea-plugin>
