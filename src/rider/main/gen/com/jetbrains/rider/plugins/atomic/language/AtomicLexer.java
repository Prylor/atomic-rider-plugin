// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/rider/main/kotlin/com/jetbrains/rider/plugins/atomic/language/Atomic.flex

package com.jetbrains.rider.plugins.atomic.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.rider.plugins.atomic.psi.AtomicTypes;
import com.intellij.psi.TokenType;


class AtomicLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int WAITING_NAMESPACE = 4;
  public static final int IN_IMPORTS = 6;
  public static final int IN_TAGS = 8;
  public static final int IN_VALUES = 10;
  public static final int IN_VALUE_NAME = 12;
  public static final int IN_VALUE_TYPE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\10\0\1\10\1\11\1\12\1\13"+
    "\12\14\1\15\1\0\1\10\1\0\1\10\2\0\10\16"+
    "\1\17\4\16\1\20\5\16\1\21\6\16\1\22\1\23"+
    "\1\22\1\0\1\16\1\0\1\24\1\16\1\25\1\26"+
    "\1\27\1\30\1\31\1\16\1\32\2\16\1\33\1\34"+
    "\1\35\1\36\1\37\1\16\1\40\1\41\1\42\1\43"+
    "\1\44\2\16\1\45\1\16\12\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\46";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\13\4\2\5\1\1\1\6"+
    "\3\7\1\10\1\11\1\12\13\13\13\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\5\21\12\4\1\0\1\23"+
    "\1\0\1\24\2\7\2\0\12\13\12\14\4\21\12\4"+
    "\2\7\12\13\12\14\4\21\7\4\1\25\2\4\1\7"+
    "\1\26\7\13\1\25\2\13\7\14\1\25\2\14\2\21"+
    "\1\27\1\21\11\4\1\30\11\13\11\14\2\21\7\4"+
    "\1\31\1\32\7\13\1\31\1\32\7\14\1\31\1\32"+
    "\1\21\4\4\1\33\2\4\4\13\1\33\2\13\4\14"+
    "\1\33\2\14\1\21\5\4\1\34\5\13\1\34\5\14"+
    "\1\34\1\21\1\4\1\35\1\36\1\4\1\37\1\13"+
    "\1\35\1\36\1\13\1\40\1\14\1\35\1\36\1\14"+
    "\1\40\1\21\1\4\1\41\1\13\1\41\1\14\1\41"+
    "\1\4\1\13\1\14\1\4\1\13\1\14\1\4\1\13"+
    "\1\14\1\4\1\13\1\14\1\4\1\13\1\14\1\4"+
    "\1\13\1\14\1\4\1\13\1\14\3\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u015f\0\u035a"+
    "\0\u0381\0\u0138\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u0138"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4"+
    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u0138\0\u015f"+
    "\0\u07c5\0\u07ec\0\u0813\0\u0138\0\u0138\0\u083a\0\u0861\0\u0888"+
    "\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0"+
    "\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0381\0\u0138\0\u0a83\0\u0aaa"+
    "\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2"+
    "\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a"+
    "\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52"+
    "\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a"+
    "\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa"+
    "\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a"+
    "\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u01ad"+
    "\0\u15a2\0\u15c9\0\u15f0\0\u03a8\0\u1617\0\u163e\0\u1665\0\u168c"+
    "\0\u16b3\0\u16da\0\u1701\0\u046b\0\u1728\0\u174f\0\u1776\0\u179d"+
    "\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u1860\0\u0618\0\u1887\0\u18ae"+
    "\0\u18d5\0\u18fc\0\u083a\0\u1923\0\u194a\0\u1971\0\u1998\0\u19bf"+
    "\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u03a8\0\u1aa9\0\u1ad0"+
    "\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u1be1\0\u1c08"+
    "\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40"+
    "\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\u1e78"+
    "\0\u1e9f\0\u01ad\0\u01ad\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62"+
    "\0\u1f89\0\u1fb0\0\u046b\0\u046b\0\u1fd7\0\u1ffe\0\u2025\0\u204c"+
    "\0\u2073\0\u209a\0\u20c1\0\u0618\0\u0618\0\u20e8\0\u210f\0\u2136"+
    "\0\u215d\0\u2184\0\u01ad\0\u21ab\0\u21d2\0\u21f9\0\u2220\0\u2247"+
    "\0\u226e\0\u046b\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331\0\u2358"+
    "\0\u0618\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442\0\u2469"+
    "\0\u2490\0\u01ad\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553\0\u046b"+
    "\0\u257a\0\u25a1\0\u25c8\0\u25ef\0\u2616\0\u0618\0\u263d\0\u2664"+
    "\0\u01ad\0\u01ad\0\u268b\0\u01ad\0\u26b2\0\u046b\0\u046b\0\u26d9"+
    "\0\u046b\0\u2700\0\u0618\0\u0618\0\u2727\0\u0618\0\u274e\0\u2775"+
    "\0\u01ad\0\u279c\0\u046b\0\u27c3\0\u0618\0\u27ea\0\u2811\0\u2838"+
    "\0\u285f\0\u2886\0\u28ad\0\u28d4\0\u28fb\0\u2922\0\u2949\0\u2970"+
    "\0\u2997\0\u29be\0\u29e5\0\u2a0c\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8"+
    "\0\u2acf\0\u2af6\0\u01ad\0\u046b\0\u0618";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\5\12\1\11\1\13\6\11\4\14\2\11\1\15"+
    "\1\16\1\17\1\20\2\14\1\21\2\14\1\22\3\14"+
    "\1\23\1\24\1\25\1\26\1\14\2\11\2\12\1\27"+
    "\1\12\1\30\1\31\6\11\1\32\4\33\2\11\4\33"+
    "\1\34\11\33\1\35\3\33\2\11\2\12\1\27\1\12"+
    "\1\30\7\11\1\32\4\36\2\11\22\36\2\11\5\12"+
    "\1\11\1\37\1\11\1\40\3\11\1\32\4\41\2\11"+
    "\1\42\1\43\1\44\1\45\2\41\1\46\2\41\1\47"+
    "\3\41\1\50\1\51\1\52\1\53\1\41\2\11\5\12"+
    "\1\11\1\37\1\11\1\40\3\11\1\32\4\54\2\11"+
    "\1\55\1\56\1\57\1\60\2\54\1\61\2\54\1\62"+
    "\3\54\1\63\1\64\1\65\1\66\1\54\2\11\5\12"+
    "\1\11\1\37\1\11\1\67\3\11\1\32\32\11\2\12"+
    "\1\70\1\12\1\71\10\11\4\72\2\11\22\72\2\11"+
    "\2\12\1\70\1\12\1\71\1\11\1\73\1\74\1\75"+
    "\3\11\1\32\4\76\2\11\3\76\1\77\2\76\1\100"+
    "\7\76\1\101\1\76\1\102\1\76\1\11\50\0\5\12"+
    "\41\0\2\13\1\0\2\13\1\0\41\13\14\0\1\14"+
    "\1\0\4\14\2\0\22\14\15\0\1\14\1\0\4\14"+
    "\2\0\5\14\1\103\14\14\15\0\1\14\1\0\4\14"+
    "\2\0\7\14\1\104\12\14\15\0\1\14\1\0\4\14"+
    "\2\0\6\14\1\105\13\14\15\0\1\14\1\0\4\14"+
    "\2\0\11\14\1\106\10\14\15\0\1\14\1\0\4\14"+
    "\2\0\10\14\1\107\11\14\15\0\1\14\1\0\4\14"+
    "\2\0\1\110\21\14\15\0\1\14\1\0\4\14\2\0"+
    "\12\14\1\111\7\14\15\0\1\14\1\0\4\14\2\0"+
    "\1\112\21\14\15\0\1\14\1\0\4\14\2\0\11\14"+
    "\1\113\10\14\15\0\1\14\1\0\4\14\2\0\1\114"+
    "\21\14\2\0\1\12\1\27\3\12\41\0\6\115\1\116"+
    "\14\115\1\117\23\115\12\0\2\120\1\33\1\0\4\33"+
    "\1\0\1\120\22\33\13\0\2\120\1\33\1\0\4\33"+
    "\1\0\1\120\1\121\21\33\13\0\2\120\1\33\1\0"+
    "\4\33\1\0\1\120\14\33\1\122\5\33\13\0\1\123"+
    "\1\0\1\36\1\0\4\36\2\0\22\36\1\0\2\37"+
    "\1\0\2\37\1\0\41\37\12\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\22\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\5\41\1\125\14\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\7\41\1\126\12\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\6\41"+
    "\1\127\13\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\11\41\1\130\10\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\10\41\1\131\11\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\1\132\21\41\13\0"+
    "\1\124\1\0\1\41\1\0\4\41\2\0\12\41\1\133"+
    "\7\41\13\0\1\124\1\0\1\41\1\0\4\41\2\0"+
    "\1\134\21\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\11\41\1\135\10\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\1\136\21\41\15\0\1\54\1\0"+
    "\4\54\2\0\22\54\15\0\1\54\1\0\4\54\2\0"+
    "\5\54\1\137\14\54\15\0\1\54\1\0\4\54\2\0"+
    "\7\54\1\140\12\54\15\0\1\54\1\0\4\54\2\0"+
    "\6\54\1\141\13\54\15\0\1\54\1\0\4\54\2\0"+
    "\11\54\1\142\10\54\15\0\1\54\1\0\4\54\2\0"+
    "\10\54\1\143\11\54\15\0\1\54\1\0\4\54\2\0"+
    "\1\144\21\54\15\0\1\54\1\0\4\54\2\0\12\54"+
    "\1\145\7\54\15\0\1\54\1\0\4\54\2\0\1\146"+
    "\21\54\15\0\1\54\1\0\4\54\2\0\11\54\1\147"+
    "\10\54\15\0\1\54\1\0\4\54\2\0\1\150\21\54"+
    "\2\0\1\12\1\70\3\12\55\0\1\72\1\0\4\72"+
    "\2\0\22\72\1\0\2\73\1\0\2\73\1\0\41\73"+
    "\12\0\1\76\1\0\1\76\1\0\5\76\1\0\22\76"+
    "\13\0\1\76\1\0\1\76\1\0\5\76\1\0\11\76"+
    "\1\151\10\76\13\0\1\76\1\0\1\76\1\0\5\76"+
    "\1\0\10\76\1\152\11\76\13\0\1\76\1\0\1\76"+
    "\1\0\5\76\1\0\1\153\21\76\13\0\1\76\1\0"+
    "\1\76\1\0\5\76\1\0\1\154\21\76\15\0\1\14"+
    "\1\0\4\14\2\0\5\14\1\155\14\14\15\0\1\14"+
    "\1\0\4\14\2\0\1\156\21\14\15\0\1\14\1\0"+
    "\4\14\2\0\14\14\1\157\5\14\15\0\1\14\1\0"+
    "\4\14\2\0\16\14\1\160\3\14\15\0\1\14\1\0"+
    "\4\14\2\0\13\14\1\161\6\14\15\0\1\14\1\0"+
    "\4\14\2\0\10\14\1\162\11\14\15\0\1\14\1\0"+
    "\4\14\2\0\7\14\1\163\12\14\15\0\1\14\1\0"+
    "\4\14\2\0\5\14\1\164\14\14\15\0\1\14\1\0"+
    "\4\14\2\0\15\14\1\165\4\14\15\0\1\14\1\0"+
    "\4\14\2\0\7\14\1\166\12\14\1\0\2\115\4\0"+
    "\40\115\13\0\3\120\1\0\4\120\1\0\23\120\13\0"+
    "\2\120\1\33\1\0\4\33\1\0\1\120\7\33\1\167"+
    "\12\33\13\0\2\120\1\33\1\0\4\33\1\0\1\120"+
    "\17\33\1\170\2\33\17\0\4\36\2\0\22\36\17\0"+
    "\4\41\2\0\22\41\13\0\1\124\1\0\1\41\1\0"+
    "\4\41\2\0\5\41\1\171\14\41\13\0\1\124\1\0"+
    "\1\41\1\0\4\41\2\0\1\172\21\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\14\41\1\173\5\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\16\41"+
    "\1\174\3\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\13\41\1\175\6\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\10\41\1\176\11\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\7\41\1\177\12\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\5\41"+
    "\1\200\14\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\15\41\1\201\4\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\7\41\1\202\12\41\15\0\1\54"+
    "\1\0\4\54\2\0\5\54\1\203\14\54\15\0\1\54"+
    "\1\0\4\54\2\0\1\204\21\54\15\0\1\54\1\0"+
    "\4\54\2\0\14\54\1\205\5\54\15\0\1\54\1\0"+
    "\4\54\2\0\16\54\1\206\3\54\15\0\1\54\1\0"+
    "\4\54\2\0\13\54\1\207\6\54\15\0\1\54\1\0"+
    "\4\54\2\0\10\54\1\210\11\54\15\0\1\54\1\0"+
    "\4\54\2\0\7\54\1\211\12\54\15\0\1\54\1\0"+
    "\4\54\2\0\5\54\1\212\14\54\15\0\1\54\1\0"+
    "\4\54\2\0\15\54\1\213\4\54\15\0\1\54\1\0"+
    "\4\54\2\0\7\54\1\214\12\54\13\0\1\76\1\0"+
    "\1\76\1\0\5\76\1\0\16\76\1\215\3\76\13\0"+
    "\1\76\1\0\1\76\1\0\5\76\1\0\13\76\1\216"+
    "\6\76\13\0\1\76\1\0\1\76\1\0\5\76\1\0"+
    "\5\76\1\217\14\76\13\0\1\76\1\0\1\76\1\0"+
    "\5\76\1\0\7\76\1\220\12\76\15\0\1\14\1\0"+
    "\4\14\2\0\14\14\1\221\5\14\15\0\1\14\1\0"+
    "\4\14\2\0\15\14\1\222\4\14\15\0\1\14\1\0"+
    "\4\14\2\0\3\14\1\223\16\14\15\0\1\14\1\0"+
    "\4\14\2\0\6\14\1\224\13\14\15\0\1\14\1\0"+
    "\4\14\2\0\12\14\1\225\7\14\15\0\1\14\1\0"+
    "\4\14\2\0\3\14\1\226\16\14\15\0\1\14\1\0"+
    "\4\14\2\0\17\14\1\227\2\14\15\0\1\14\1\0"+
    "\4\14\2\0\15\14\1\230\4\14\15\0\1\14\1\0"+
    "\4\14\2\0\1\231\21\14\15\0\1\14\1\0\4\14"+
    "\2\0\17\14\1\232\2\14\13\0\2\120\1\33\1\0"+
    "\4\33\1\0\1\120\15\33\1\233\4\33\13\0\2\120"+
    "\1\33\1\0\4\33\1\0\1\120\3\33\1\234\16\33"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\14\41"+
    "\1\235\5\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\15\41\1\236\4\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\3\41\1\237\16\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\6\41\1\240\13\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\12\41"+
    "\1\241\7\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\3\41\1\242\16\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\17\41\1\243\2\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\15\41\1\244\4\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\1\245"+
    "\21\41\13\0\1\124\1\0\1\41\1\0\4\41\2\0"+
    "\17\41\1\246\2\41\15\0\1\54\1\0\4\54\2\0"+
    "\14\54\1\247\5\54\15\0\1\54\1\0\4\54\2\0"+
    "\15\54\1\250\4\54\15\0\1\54\1\0\4\54\2\0"+
    "\3\54\1\251\16\54\15\0\1\54\1\0\4\54\2\0"+
    "\6\54\1\252\13\54\15\0\1\54\1\0\4\54\2\0"+
    "\12\54\1\253\7\54\15\0\1\54\1\0\4\54\2\0"+
    "\3\54\1\254\16\54\15\0\1\54\1\0\4\54\2\0"+
    "\17\54\1\255\2\54\15\0\1\54\1\0\4\54\2\0"+
    "\15\54\1\256\4\54\15\0\1\54\1\0\4\54\2\0"+
    "\1\257\21\54\15\0\1\54\1\0\4\54\2\0\17\54"+
    "\1\260\2\54\13\0\1\76\1\0\1\76\1\0\5\76"+
    "\1\0\6\76\1\261\13\76\13\0\1\76\1\0\1\76"+
    "\1\0\5\76\1\0\12\76\1\262\7\76\13\0\1\76"+
    "\1\0\1\76\1\0\5\76\1\0\15\76\1\263\4\76"+
    "\13\0\1\76\1\0\1\76\1\0\5\76\1\0\17\76"+
    "\1\264\2\76\15\0\1\14\1\0\4\14\2\0\3\14"+
    "\1\265\16\14\15\0\1\14\1\0\4\14\2\0\15\14"+
    "\1\266\4\14\15\0\1\14\1\0\4\14\2\0\1\14"+
    "\1\267\20\14\15\0\1\14\1\0\4\14\2\0\16\14"+
    "\1\270\3\14\15\0\1\14\1\0\4\14\2\0\14\14"+
    "\1\271\5\14\15\0\1\14\1\0\4\14\2\0\15\14"+
    "\1\272\4\14\15\0\1\14\1\0\4\14\2\0\16\14"+
    "\1\273\3\14\15\0\1\14\1\0\4\14\2\0\4\14"+
    "\1\274\15\14\15\0\1\14\1\0\4\14\2\0\3\14"+
    "\1\275\16\14\13\0\2\120\1\33\1\0\4\33\1\0"+
    "\1\120\3\33\1\276\16\33\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\3\41\1\277\16\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\15\41\1\300\4\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\1\41"+
    "\1\301\20\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\16\41\1\302\3\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\14\41\1\303\5\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\15\41\1\304\4\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\16\41"+
    "\1\305\3\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\4\41\1\306\15\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\3\41\1\307\16\41\15\0\1\54"+
    "\1\0\4\54\2\0\3\54\1\310\16\54\15\0\1\54"+
    "\1\0\4\54\2\0\15\54\1\311\4\54\15\0\1\54"+
    "\1\0\4\54\2\0\1\54\1\312\20\54\15\0\1\54"+
    "\1\0\4\54\2\0\16\54\1\313\3\54\15\0\1\54"+
    "\1\0\4\54\2\0\14\54\1\314\5\54\15\0\1\54"+
    "\1\0\4\54\2\0\15\54\1\315\4\54\15\0\1\54"+
    "\1\0\4\54\2\0\16\54\1\316\3\54\15\0\1\54"+
    "\1\0\4\54\2\0\4\54\1\317\15\54\15\0\1\54"+
    "\1\0\4\54\2\0\3\54\1\320\16\54\13\0\1\76"+
    "\1\0\1\76\1\0\5\76\1\0\16\76\1\321\3\76"+
    "\13\0\1\76\1\0\1\76\1\0\5\76\1\0\14\76"+
    "\1\322\5\76\13\0\1\76\1\0\1\76\1\0\5\76"+
    "\1\0\3\76\1\217\16\76\15\0\1\14\1\0\4\14"+
    "\2\0\15\14\1\323\4\14\15\0\1\14\1\0\2\14"+
    "\1\324\1\14\2\0\22\14\15\0\1\14\1\0\4\14"+
    "\2\0\16\14\1\325\3\14\15\0\1\14\1\0\4\14"+
    "\2\0\21\14\1\326\15\0\1\14\1\0\4\14\2\0"+
    "\16\14\1\327\3\14\15\0\1\14\1\0\4\14\2\0"+
    "\13\14\1\330\6\14\15\0\1\14\1\0\4\14\2\0"+
    "\6\14\1\331\13\14\15\0\1\14\1\0\4\14\2\0"+
    "\3\14\1\332\16\14\15\0\1\14\1\0\4\14\2\0"+
    "\15\14\1\333\4\14\13\0\1\124\1\0\1\41\1\0"+
    "\4\41\2\0\15\41\1\334\4\41\13\0\1\124\1\0"+
    "\1\41\1\0\2\41\1\335\1\41\2\0\22\41\13\0"+
    "\1\124\1\0\1\41\1\0\4\41\2\0\16\41\1\336"+
    "\3\41\13\0\1\124\1\0\1\41\1\0\4\41\2\0"+
    "\21\41\1\337\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\16\41\1\340\3\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\13\41\1\341\6\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\6\41\1\342\13\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\3\41"+
    "\1\343\16\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\15\41\1\344\4\41\15\0\1\54\1\0\4\54"+
    "\2\0\15\54\1\345\4\54\15\0\1\54\1\0\2\54"+
    "\1\346\1\54\2\0\22\54\15\0\1\54\1\0\4\54"+
    "\2\0\16\54\1\347\3\54\15\0\1\54\1\0\4\54"+
    "\2\0\21\54\1\350\15\0\1\54\1\0\4\54\2\0"+
    "\16\54\1\351\3\54\15\0\1\54\1\0\4\54\2\0"+
    "\13\54\1\352\6\54\15\0\1\54\1\0\4\54\2\0"+
    "\6\54\1\353\13\54\15\0\1\54\1\0\4\54\2\0"+
    "\3\54\1\354\16\54\15\0\1\54\1\0\4\54\2\0"+
    "\15\54\1\355\4\54\13\0\1\76\1\0\1\76\1\0"+
    "\5\76\1\0\21\76\1\356\13\0\1\76\1\0\1\76"+
    "\1\0\5\76\1\0\16\76\1\217\3\76\15\0\1\14"+
    "\1\0\4\14\2\0\15\14\1\357\4\14\15\0\1\14"+
    "\1\0\4\14\2\0\1\360\21\14\15\0\1\14\1\0"+
    "\4\14\2\0\12\14\1\361\7\14\15\0\1\14\1\0"+
    "\3\14\1\362\2\0\22\14\15\0\1\14\1\0\4\14"+
    "\2\0\15\14\1\363\4\14\15\0\1\14\1\0\4\14"+
    "\2\0\1\364\21\14\15\0\1\14\1\0\4\14\2\0"+
    "\12\14\1\365\7\14\13\0\1\124\1\0\1\41\1\0"+
    "\4\41\2\0\15\41\1\366\4\41\13\0\1\124\1\0"+
    "\1\41\1\0\4\41\2\0\1\367\21\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\12\41\1\370\7\41"+
    "\13\0\1\124\1\0\1\41\1\0\3\41\1\371\2\0"+
    "\22\41\13\0\1\124\1\0\1\41\1\0\4\41\2\0"+
    "\15\41\1\372\4\41\13\0\1\124\1\0\1\41\1\0"+
    "\4\41\2\0\1\373\21\41\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\12\41\1\374\7\41\15\0\1\54"+
    "\1\0\4\54\2\0\15\54\1\375\4\54\15\0\1\54"+
    "\1\0\4\54\2\0\1\376\21\54\15\0\1\54\1\0"+
    "\4\54\2\0\12\54\1\377\7\54\15\0\1\54\1\0"+
    "\3\54\1\u0100\2\0\22\54\15\0\1\54\1\0\4\54"+
    "\2\0\15\54\1\u0101\4\54\15\0\1\54\1\0\4\54"+
    "\2\0\1\u0102\21\54\15\0\1\54\1\0\4\54\2\0"+
    "\12\54\1\u0103\7\54\13\0\1\76\1\0\1\76\1\0"+
    "\3\76\1\u0104\1\76\1\0\22\76\15\0\1\14\1\0"+
    "\4\14\2\0\6\14\1\u0105\13\14\15\0\1\14\1\0"+
    "\4\14\2\0\10\14\1\u0106\11\14\15\0\1\14\1\0"+
    "\4\14\2\0\14\14\1\u0107\5\14\15\0\1\14\1\0"+
    "\4\14\2\0\21\14\1\u0108\15\0\1\14\1\0\4\14"+
    "\2\0\1\14\1\u0109\20\14\15\0\1\14\1\0\4\14"+
    "\2\0\11\14\1\u010a\10\14\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\6\41\1\u010b\13\41\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\10\41\1\u010c\11\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\14\41"+
    "\1\u010d\5\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\21\41\1\u010e\13\0\1\124\1\0\1\41\1\0"+
    "\4\41\2\0\1\41\1\u010f\20\41\13\0\1\124\1\0"+
    "\1\41\1\0\4\41\2\0\11\41\1\u0110\10\41\15\0"+
    "\1\54\1\0\4\54\2\0\6\54\1\u0111\13\54\15\0"+
    "\1\54\1\0\4\54\2\0\10\54\1\u0112\11\54\15\0"+
    "\1\54\1\0\4\54\2\0\14\54\1\u0113\5\54\15\0"+
    "\1\54\1\0\4\54\2\0\21\54\1\u0114\15\0\1\54"+
    "\1\0\4\54\2\0\1\54\1\u0115\20\54\15\0\1\54"+
    "\1\0\4\54\2\0\11\54\1\u0116\10\54\13\0\1\76"+
    "\1\0\1\76\1\0\5\76\1\0\21\76\1\u0117\15\0"+
    "\1\14\1\0\4\14\2\0\20\14\1\u0118\1\14\15\0"+
    "\1\14\1\0\4\14\2\0\3\14\1\u0119\16\14\15\0"+
    "\1\14\1\0\4\14\2\0\21\14\1\u011a\15\0\1\14"+
    "\1\0\4\14\2\0\13\14\1\u011b\6\14\15\0\1\14"+
    "\1\0\4\14\2\0\3\14\1\u011c\16\14\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\20\41\1\u011d\1\41"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\3\41"+
    "\1\u011e\16\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\21\41\1\u011f\13\0\1\124\1\0\1\41\1\0"+
    "\4\41\2\0\13\41\1\u0120\6\41\13\0\1\124\1\0"+
    "\1\41\1\0\4\41\2\0\3\41\1\u0121\16\41\15\0"+
    "\1\54\1\0\4\54\2\0\20\54\1\u0122\1\54\15\0"+
    "\1\54\1\0\4\54\2\0\3\54\1\u0123\16\54\15\0"+
    "\1\54\1\0\4\54\2\0\21\54\1\u0124\15\0\1\54"+
    "\1\0\4\54\2\0\13\54\1\u0125\6\54\15\0\1\54"+
    "\1\0\4\54\2\0\3\54\1\u0126\16\54\13\0\1\76"+
    "\1\0\1\76\1\0\5\76\1\0\13\76\1\u0127\6\76"+
    "\15\0\1\14\1\0\4\14\2\0\3\14\1\u0128\16\14"+
    "\15\0\1\14\1\0\4\14\2\0\3\14\1\u0129\16\14"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\3\41"+
    "\1\u012a\16\41\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\3\41\1\u012b\16\41\15\0\1\54\1\0\4\54"+
    "\2\0\3\54\1\u012c\16\54\15\0\1\54\1\0\4\54"+
    "\2\0\3\54\1\u012d\16\54\13\0\1\76\1\0\1\76"+
    "\1\0\5\76\1\0\3\76\1\263\16\76\15\0\1\14"+
    "\1\0\1\14\1\u012e\2\14\2\0\22\14\13\0\1\124"+
    "\1\0\1\41\1\0\1\41\1\u012f\2\41\2\0\22\41"+
    "\15\0\1\54\1\0\1\54\1\u0130\2\54\2\0\22\54"+
    "\15\0\1\14\1\0\4\14\2\0\11\14\1\u0131\10\14"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\11\41"+
    "\1\u0132\10\41\15\0\1\54\1\0\4\54\2\0\11\54"+
    "\1\u0133\10\54\15\0\1\14\1\0\4\14\2\0\7\14"+
    "\1\u0134\12\14\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\7\41\1\u0135\12\41\15\0\1\54\1\0\4\54"+
    "\2\0\7\54\1\u0136\12\54\15\0\1\14\1\0\4\14"+
    "\2\0\6\14\1\u0137\13\14\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\6\41\1\u0138\13\41\15\0\1\54"+
    "\1\0\4\54\2\0\6\54\1\u0139\13\54\15\0\1\14"+
    "\1\0\4\14\2\0\11\14\1\u013a\10\14\13\0\1\124"+
    "\1\0\1\41\1\0\4\41\2\0\11\41\1\u013b\10\41"+
    "\15\0\1\54\1\0\4\54\2\0\11\54\1\u013c\10\54"+
    "\15\0\1\14\1\0\4\14\2\0\6\14\1\u013d\13\14"+
    "\13\0\1\124\1\0\1\41\1\0\4\41\2\0\6\41"+
    "\1\u013e\13\41\15\0\1\54\1\0\4\54\2\0\6\54"+
    "\1\u013f\13\54\15\0\1\14\1\0\4\14\2\0\11\14"+
    "\1\u0140\10\14\13\0\1\124\1\0\1\41\1\0\4\41"+
    "\2\0\11\41\1\u0141\10\41\15\0\1\54\1\0\4\54"+
    "\2\0\11\54\1\u0142\10\54\15\0\1\14\1\0\4\14"+
    "\2\0\5\14\1\u0143\14\14\13\0\1\124\1\0\1\41"+
    "\1\0\4\41\2\0\5\41\1\u0144\14\41\15\0\1\54"+
    "\1\0\4\54\2\0\5\54\1\u0145\14\54\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11037];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\20\1\1\11\5\1\1\11\26\1\1\11"+
    "\4\1\2\11\17\1\1\0\1\11\1\0\3\1\2\0"+
    "\361\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AtomicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 35: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 36: break;
          case 3:
            { yybegin(YYINITIAL); return AtomicTypes.COMMENT;
            }
          // fall through
          case 37: break;
          case 4:
            { return AtomicTypes.IDENTIFIER;
            }
          // fall through
          case 38: break;
          case 5:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 39: break;
          case 6:
            { return AtomicTypes.COLON;
            }
          // fall through
          case 40: break;
          case 7:
            { yybegin(YYINITIAL); return AtomicTypes.IDENTIFIER;
            }
          // fall through
          case 41: break;
          case 8:
            { yybegin(YYINITIAL); return AtomicTypes.NAMESPACE_VALUE;
            }
          // fall through
          case 42: break;
          case 9:
            { return AtomicTypes.COMMENT;
            }
          // fall through
          case 43: break;
          case 10:
            { return AtomicTypes.HYPHEN;
            }
          // fall through
          case 44: break;
          case 11:
            { return AtomicTypes.IMPORT_PATH;
            }
          // fall through
          case 45: break;
          case 12:
            { return AtomicTypes.TAG_NAME;
            }
          // fall through
          case 46: break;
          case 13:
            { yybegin(IN_VALUE_NAME); return AtomicTypes.HYPHEN;
            }
          // fall through
          case 47: break;
          case 14:
            { yybegin(IN_VALUES); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 15:
            { yybegin(IN_VALUE_TYPE); return AtomicTypes.VALUE_NAME;
            }
          // fall through
          case 49: break;
          case 16:
            { yybegin(IN_VALUES); return AtomicTypes.COMMENT;
            }
          // fall through
          case 50: break;
          case 17:
            { return AtomicTypes.TYPE_REFERENCE;
            }
          // fall through
          case 51: break;
          case 18:
            { yypushback(1); yybegin(IN_VALUES);
            }
          // fall through
          case 52: break;
          case 19:
            { yybegin(YYINITIAL); return AtomicTypes.STRING;
            }
          // fall through
          case 53: break;
          case 20:
            { yybegin(YYINITIAL); return AtomicTypes.TYPE_REFERENCE;
            }
          // fall through
          case 54: break;
          case 21:
            { yybegin(IN_TAGS); return AtomicTypes.TAGS_KEYWORD;
            }
          // fall through
          case 55: break;
          case 22:
            { yybegin(YYINITIAL); return AtomicTypes.TRUE;
            }
          // fall through
          case 56: break;
          case 23:
            { yypushback(yylength()); yybegin(IN_VALUES);
            }
          // fall through
          case 57: break;
          case 24:
            { yybegin(YYINITIAL); return AtomicTypes.FALSE;
            }
          // fall through
          case 58: break;
          case 25:
            { yybegin(WAITING_VALUE); return AtomicTypes.UNSAFE_KEYWORD;
            }
          // fall through
          case 59: break;
          case 26:
            { yybegin(IN_VALUES); return AtomicTypes.VALUES_KEYWORD;
            }
          // fall through
          case 60: break;
          case 27:
            { yybegin(IN_IMPORTS); return AtomicTypes.IMPORTS_KEYWORD;
            }
          // fall through
          case 61: break;
          case 28:
            { yybegin(WAITING_VALUE); return AtomicTypes.SOLUTION_KEYWORD;
            }
          // fall through
          case 62: break;
          case 29:
            { yybegin(WAITING_VALUE); return AtomicTypes.CLASS_NAME_KEYWORD;
            }
          // fall through
          case 63: break;
          case 30:
            { yybegin(WAITING_VALUE); return AtomicTypes.DIRECTORY_KEYWORD;
            }
          // fall through
          case 64: break;
          case 31:
            { yybegin(WAITING_NAMESPACE); return AtomicTypes.NAMESPACE_KEYWORD;
            }
          // fall through
          case 65: break;
          case 32:
            { yybegin(WAITING_VALUE); return AtomicTypes.NAMESPACE_KEYWORD;
            }
          // fall through
          case 66: break;
          case 33:
            { yybegin(WAITING_VALUE); return AtomicTypes.ENTITY_TYPE_KEYWORD;
            }
          // fall through
          case 67: break;
          case 34:
            { yybegin(WAITING_VALUE); return AtomicTypes.AGGRESSIVE_INLINING_KEYWORD;
            }
          // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
