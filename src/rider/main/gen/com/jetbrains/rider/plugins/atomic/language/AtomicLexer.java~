// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/rider/main/kotlin/com/jetbrains/rider/plugins/atomic/language/Atomic.flex

package com.jetbrains.rider.plugins.atomic.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.rider.plugins.atomic.psi.AtomicTypes;
import com.intellij.psi.TokenType;


class AtomicLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int WAITING_NAMESPACE = 4;
  public static final int IN_IMPORTS = 6;
  public static final int IN_TAGS = 8;
  public static final int IN_VALUES = 10;
  public static final int IN_VALUE_NAME = 12;
  public static final int IN_VALUE_TYPE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\10\0\1\10\1\11\1\12\1\13"+
    "\12\14\1\15\1\0\1\10\1\0\1\10\2\0\10\16"+
    "\1\17\4\16\1\20\5\16\1\21\6\16\1\22\1\23"+
    "\1\22\1\0\1\16\1\0\1\24\1\16\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\16\1\34\1\35"+
    "\1\36\1\37\1\40\1\16\1\41\1\42\1\43\1\44"+
    "\1\45\2\16\1\46\1\16\12\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\47";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\14\4\2\5\1\1\1\6"+
    "\3\7\1\10\1\11\1\12\14\13\14\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\6\21\13\4\1\0\1\23"+
    "\1\0\1\24\2\7\2\0\13\13\13\14\5\21\13\4"+
    "\2\7\13\13\13\14\5\21\10\4\1\25\2\4\1\7"+
    "\1\26\10\13\1\25\2\13\10\14\1\25\2\14\3\21"+
    "\1\27\1\21\12\4\1\30\12\13\12\14\3\21\4\4"+
    "\1\31\3\4\1\32\1\33\4\13\1\31\3\13\1\32"+
    "\1\33\4\14\1\31\3\14\1\32\1\33\1\21\4\4"+
    "\1\34\2\4\4\13\1\34\2\13\4\14\1\34\2\14"+
    "\1\21\5\4\1\35\5\13\1\35\5\14\1\35\1\21"+
    "\1\4\1\36\1\37\1\4\1\40\1\13\1\36\1\37"+
    "\1\13\1\41\1\14\1\36\1\37\1\14\1\41\1\21"+
    "\1\4\1\42\1\13\1\42\1\14\1\42\1\4\1\13"+
    "\1\14\1\4\1\13\1\14\1\4\1\13\1\14\1\4"+
    "\1\13\1\14\1\4\1\13\1\14\1\4\1\13\1\14"+
    "\1\4\1\13\1\14\3\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0168"+
    "\0\u0398\0\u03c0\0\u0140\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488"+
    "\0\u0140\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0"+
    "\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0"+
    "\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820"+
    "\0\u0848\0\u0140\0\u0168\0\u0870\0\u0898\0\u08c0\0\u0140\0\u0140"+
    "\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00"+
    "\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40"+
    "\0\u0b68\0\u03c0\0\u0140\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30"+
    "\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70"+
    "\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0"+
    "\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0"+
    "\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130"+
    "\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270"+
    "\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0"+
    "\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0"+
    "\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630"+
    "\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770"+
    "\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u01b8\0\u1838\0\u1860\0\u1888"+
    "\0\u03e8\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978\0\u19a0"+
    "\0\u19c8\0\u04b0\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8"+
    "\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u0690\0\u1b80\0\u1ba8\0\u1bd0"+
    "\0\u1bf8\0\u1c20\0\u08e8\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8"+
    "\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u03e8\0\u1e00"+
    "\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u2058\0\u2080"+
    "\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170\0\u2198\0\u21c0"+
    "\0\u21e8\0\u2210\0\u01b8\0\u2238\0\u2260\0\u2288\0\u01b8\0\u01b8"+
    "\0\u22b0\0\u22d8\0\u2300\0\u2328\0\u04b0\0\u2350\0\u2378\0\u23a0"+
    "\0\u04b0\0\u04b0\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u0690\0\u2468"+
    "\0\u2490\0\u24b8\0\u0690\0\u0690\0\u24e0\0\u2508\0\u2530\0\u2558"+
    "\0\u2580\0\u01b8\0\u25a8\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670"+
    "\0\u04b0\0\u2698\0\u26c0\0\u26e8\0\u2710\0\u2738\0\u2760\0\u0690"+
    "\0\u2788\0\u27b0\0\u27d8\0\u2800\0\u2828\0\u2850\0\u2878\0\u28a0"+
    "\0\u01b8\0\u28c8\0\u28f0\0\u2918\0\u2940\0\u2968\0\u04b0\0\u2990"+
    "\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u0690\0\u2a58\0\u2a80\0\u01b8"+
    "\0\u01b8\0\u2aa8\0\u01b8\0\u2ad0\0\u04b0\0\u04b0\0\u2af8\0\u04b0"+
    "\0\u2b20\0\u0690\0\u0690\0\u2b48\0\u0690\0\u2b70\0\u2b98\0\u01b8"+
    "\0\u2bc0\0\u04b0\0\u2be8\0\u0690\0\u2c10\0\u2c38\0\u2c60\0\u2c88"+
    "\0\u2cb0\0\u2cd8\0\u2d00\0\u2d28\0\u2d50\0\u2d78\0\u2da0\0\u2dc8"+
    "\0\u2df0\0\u2e18\0\u2e40\0\u2e68\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08"+
    "\0\u2f30\0\u01b8\0\u04b0\0\u0690";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\5\12\1\11\1\13\6\11\4\14\2\11\1\15"+
    "\1\16\1\17\1\20\2\14\1\21\1\22\2\14\1\23"+
    "\3\14\1\24\1\25\1\26\1\27\1\14\2\11\2\12"+
    "\1\30\1\12\1\31\1\32\6\11\1\33\4\34\2\11"+
    "\4\34\1\35\12\34\1\36\3\34\2\11\2\12\1\30"+
    "\1\12\1\31\7\11\1\33\4\37\2\11\23\37\2\11"+
    "\5\12\1\11\1\40\1\11\1\41\3\11\1\33\4\42"+
    "\2\11\1\43\1\44\1\45\1\46\2\42\1\47\1\50"+
    "\2\42\1\51\3\42\1\52\1\53\1\54\1\55\1\42"+
    "\2\11\5\12\1\11\1\40\1\11\1\41\3\11\1\33"+
    "\4\56\2\11\1\57\1\60\1\61\1\62\2\56\1\63"+
    "\1\64\2\56\1\65\3\56\1\66\1\67\1\70\1\71"+
    "\1\56\2\11\5\12\1\11\1\40\1\11\1\72\3\11"+
    "\1\33\33\11\2\12\1\73\1\12\1\74\10\11\4\75"+
    "\2\11\23\75\2\11\2\12\1\73\1\12\1\74\1\11"+
    "\1\76\1\77\1\100\3\11\1\33\4\101\2\11\3\101"+
    "\1\102\2\101\1\103\1\104\7\101\1\105\1\101\1\106"+
    "\1\101\1\11\51\0\5\12\42\0\2\13\1\0\2\13"+
    "\1\0\42\13\14\0\1\14\1\0\4\14\2\0\23\14"+
    "\15\0\1\14\1\0\4\14\2\0\5\14\1\107\15\14"+
    "\15\0\1\14\1\0\4\14\2\0\10\14\1\110\12\14"+
    "\15\0\1\14\1\0\4\14\2\0\7\14\1\111\13\14"+
    "\15\0\1\14\1\0\4\14\2\0\12\14\1\112\10\14"+
    "\15\0\1\14\1\0\4\14\2\0\3\14\1\113\17\14"+
    "\15\0\1\14\1\0\4\14\2\0\11\14\1\114\11\14"+
    "\15\0\1\14\1\0\4\14\2\0\1\115\22\14\15\0"+
    "\1\14\1\0\4\14\2\0\13\14\1\116\7\14\15\0"+
    "\1\14\1\0\4\14\2\0\1\117\22\14\15\0\1\14"+
    "\1\0\4\14\2\0\12\14\1\120\10\14\15\0\1\14"+
    "\1\0\4\14\2\0\1\121\22\14\2\0\1\12\1\30"+
    "\3\12\42\0\6\122\1\123\14\122\1\124\24\122\12\0"+
    "\2\125\1\34\1\0\4\34\1\0\1\125\23\34\13\0"+
    "\2\125\1\34\1\0\4\34\1\0\1\125\1\126\22\34"+
    "\13\0\2\125\1\34\1\0\4\34\1\0\1\125\15\34"+
    "\1\127\5\34\13\0\1\130\1\0\1\37\1\0\4\37"+
    "\2\0\23\37\1\0\2\40\1\0\2\40\1\0\42\40"+
    "\12\0\1\131\1\0\1\42\1\0\4\42\2\0\23\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\5\42"+
    "\1\132\15\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\10\42\1\133\12\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\7\42\1\134\13\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\12\42\1\135\10\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\3\42"+
    "\1\136\17\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\11\42\1\137\11\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\1\140\22\42\13\0\1\131\1\0"+
    "\1\42\1\0\4\42\2\0\13\42\1\141\7\42\13\0"+
    "\1\131\1\0\1\42\1\0\4\42\2\0\1\142\22\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\12\42"+
    "\1\143\10\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\1\144\22\42\15\0\1\56\1\0\4\56\2\0"+
    "\23\56\15\0\1\56\1\0\4\56\2\0\5\56\1\145"+
    "\15\56\15\0\1\56\1\0\4\56\2\0\10\56\1\146"+
    "\12\56\15\0\1\56\1\0\4\56\2\0\7\56\1\147"+
    "\13\56\15\0\1\56\1\0\4\56\2\0\12\56\1\150"+
    "\10\56\15\0\1\56\1\0\4\56\2\0\3\56\1\151"+
    "\17\56\15\0\1\56\1\0\4\56\2\0\11\56\1\152"+
    "\11\56\15\0\1\56\1\0\4\56\2\0\1\153\22\56"+
    "\15\0\1\56\1\0\4\56\2\0\13\56\1\154\7\56"+
    "\15\0\1\56\1\0\4\56\2\0\1\155\22\56\15\0"+
    "\1\56\1\0\4\56\2\0\12\56\1\156\10\56\15\0"+
    "\1\56\1\0\4\56\2\0\1\157\22\56\2\0\1\12"+
    "\1\73\3\12\56\0\1\75\1\0\4\75\2\0\23\75"+
    "\1\0\2\76\1\0\2\76\1\0\42\76\12\0\1\101"+
    "\1\0\1\101\1\0\5\101\1\0\23\101\13\0\1\101"+
    "\1\0\1\101\1\0\5\101\1\0\12\101\1\160\10\101"+
    "\13\0\1\101\1\0\1\101\1\0\5\101\1\0\3\101"+
    "\1\161\17\101\13\0\1\101\1\0\1\101\1\0\5\101"+
    "\1\0\11\101\1\162\11\101\13\0\1\101\1\0\1\101"+
    "\1\0\5\101\1\0\1\163\22\101\13\0\1\101\1\0"+
    "\1\101\1\0\5\101\1\0\1\164\22\101\15\0\1\14"+
    "\1\0\4\14\2\0\5\14\1\165\15\14\15\0\1\14"+
    "\1\0\4\14\2\0\1\166\22\14\15\0\1\14\1\0"+
    "\4\14\2\0\15\14\1\167\5\14\15\0\1\14\1\0"+
    "\4\14\2\0\17\14\1\170\3\14\15\0\1\14\1\0"+
    "\4\14\2\0\1\171\22\14\15\0\1\14\1\0\4\14"+
    "\2\0\14\14\1\172\6\14\15\0\1\14\1\0\4\14"+
    "\2\0\11\14\1\173\11\14\15\0\1\14\1\0\4\14"+
    "\2\0\10\14\1\174\12\14\15\0\1\14\1\0\4\14"+
    "\2\0\5\14\1\175\15\14\15\0\1\14\1\0\4\14"+
    "\2\0\16\14\1\176\4\14\15\0\1\14\1\0\4\14"+
    "\2\0\10\14\1\177\12\14\1\0\2\122\4\0\41\122"+
    "\13\0\3\125\1\0\4\125\1\0\24\125\13\0\2\125"+
    "\1\34\1\0\4\34\1\0\1\125\10\34\1\200\12\34"+
    "\13\0\2\125\1\34\1\0\4\34\1\0\1\125\20\34"+
    "\1\201\2\34\17\0\4\37\2\0\23\37\17\0\4\42"+
    "\2\0\23\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\5\42\1\202\15\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\1\203\22\42\13\0\1\131\1\0"+
    "\1\42\1\0\4\42\2\0\15\42\1\204\5\42\13\0"+
    "\1\131\1\0\1\42\1\0\4\42\2\0\17\42\1\205"+
    "\3\42\13\0\1\131\1\0\1\42\1\0\4\42\2\0"+
    "\1\206\22\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\14\42\1\207\6\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\11\42\1\210\11\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\10\42\1\211\12\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\5\42"+
    "\1\212\15\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\16\42\1\213\4\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\10\42\1\214\12\42\15\0\1\56"+
    "\1\0\4\56\2\0\5\56\1\215\15\56\15\0\1\56"+
    "\1\0\4\56\2\0\1\216\22\56\15\0\1\56\1\0"+
    "\4\56\2\0\15\56\1\217\5\56\15\0\1\56\1\0"+
    "\4\56\2\0\17\56\1\220\3\56\15\0\1\56\1\0"+
    "\4\56\2\0\1\221\22\56\15\0\1\56\1\0\4\56"+
    "\2\0\14\56\1\222\6\56\15\0\1\56\1\0\4\56"+
    "\2\0\11\56\1\223\11\56\15\0\1\56\1\0\4\56"+
    "\2\0\10\56\1\224\12\56\15\0\1\56\1\0\4\56"+
    "\2\0\5\56\1\225\15\56\15\0\1\56\1\0\4\56"+
    "\2\0\16\56\1\226\4\56\15\0\1\56\1\0\4\56"+
    "\2\0\10\56\1\227\12\56\13\0\1\101\1\0\1\101"+
    "\1\0\5\101\1\0\17\101\1\230\3\101\13\0\1\101"+
    "\1\0\1\101\1\0\5\101\1\0\1\231\22\101\13\0"+
    "\1\101\1\0\1\101\1\0\5\101\1\0\14\101\1\232"+
    "\6\101\13\0\1\101\1\0\1\101\1\0\5\101\1\0"+
    "\5\101\1\233\15\101\13\0\1\101\1\0\1\101\1\0"+
    "\5\101\1\0\10\101\1\234\12\101\15\0\1\14\1\0"+
    "\4\14\2\0\15\14\1\235\5\14\15\0\1\14\1\0"+
    "\4\14\2\0\16\14\1\236\4\14\15\0\1\14\1\0"+
    "\4\14\2\0\3\14\1\237\17\14\15\0\1\14\1\0"+
    "\4\14\2\0\7\14\1\240\13\14\15\0\1\14\1\0"+
    "\4\14\2\0\2\14\1\241\20\14\15\0\1\14\1\0"+
    "\4\14\2\0\13\14\1\242\7\14\15\0\1\14\1\0"+
    "\4\14\2\0\3\14\1\243\17\14\15\0\1\14\1\0"+
    "\4\14\2\0\20\14\1\244\2\14\15\0\1\14\1\0"+
    "\4\14\2\0\16\14\1\245\4\14\15\0\1\14\1\0"+
    "\4\14\2\0\1\246\22\14\15\0\1\14\1\0\4\14"+
    "\2\0\20\14\1\247\2\14\13\0\2\125\1\34\1\0"+
    "\4\34\1\0\1\125\16\34\1\250\4\34\13\0\2\125"+
    "\1\34\1\0\4\34\1\0\1\125\3\34\1\251\17\34"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\15\42"+
    "\1\252\5\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\16\42\1\253\4\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\3\42\1\254\17\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\7\42\1\255\13\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\2\42"+
    "\1\256\20\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\13\42\1\257\7\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\3\42\1\260\17\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\20\42\1\261\2\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\16\42"+
    "\1\262\4\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\1\263\22\42\13\0\1\131\1\0\1\42\1\0"+
    "\4\42\2\0\20\42\1\264\2\42\15\0\1\56\1\0"+
    "\4\56\2\0\15\56\1\265\5\56\15\0\1\56\1\0"+
    "\4\56\2\0\16\56\1\266\4\56\15\0\1\56\1\0"+
    "\4\56\2\0\3\56\1\267\17\56\15\0\1\56\1\0"+
    "\4\56\2\0\7\56\1\270\13\56\15\0\1\56\1\0"+
    "\4\56\2\0\2\56\1\271\20\56\15\0\1\56\1\0"+
    "\4\56\2\0\13\56\1\272\7\56\15\0\1\56\1\0"+
    "\4\56\2\0\3\56\1\273\17\56\15\0\1\56\1\0"+
    "\4\56\2\0\20\56\1\274\2\56\15\0\1\56\1\0"+
    "\4\56\2\0\16\56\1\275\4\56\15\0\1\56\1\0"+
    "\4\56\2\0\1\276\22\56\15\0\1\56\1\0\4\56"+
    "\2\0\20\56\1\277\2\56\13\0\1\101\1\0\1\101"+
    "\1\0\5\101\1\0\7\101\1\300\13\101\13\0\1\101"+
    "\1\0\1\101\1\0\5\101\1\0\2\101\1\301\20\101"+
    "\13\0\1\101\1\0\1\101\1\0\5\101\1\0\13\101"+
    "\1\302\7\101\13\0\1\101\1\0\1\101\1\0\5\101"+
    "\1\0\16\101\1\303\4\101\13\0\1\101\1\0\1\101"+
    "\1\0\5\101\1\0\20\101\1\304\2\101\15\0\1\14"+
    "\1\0\4\14\2\0\3\14\1\305\17\14\15\0\1\14"+
    "\1\0\4\14\2\0\16\14\1\306\4\14\15\0\1\14"+
    "\1\0\4\14\2\0\1\14\1\307\21\14\15\0\1\14"+
    "\1\0\4\14\2\0\17\14\1\310\3\14\15\0\1\14"+
    "\1\0\4\14\2\0\3\14\1\311\17\14\15\0\1\14"+
    "\1\0\4\14\2\0\15\14\1\312\5\14\15\0\1\14"+
    "\1\0\4\14\2\0\16\14\1\313\4\14\15\0\1\14"+
    "\1\0\4\14\2\0\17\14\1\314\3\14\15\0\1\14"+
    "\1\0\4\14\2\0\4\14\1\315\16\14\15\0\1\14"+
    "\1\0\4\14\2\0\3\14\1\316\17\14\13\0\2\125"+
    "\1\34\1\0\4\34\1\0\1\125\3\34\1\317\17\34"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\3\42"+
    "\1\320\17\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\16\42\1\321\4\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\1\42\1\322\21\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\17\42\1\323\3\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\3\42"+
    "\1\324\17\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\15\42\1\325\5\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\16\42\1\326\4\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\17\42\1\327\3\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\4\42"+
    "\1\330\16\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\3\42\1\331\17\42\15\0\1\56\1\0\4\56"+
    "\2\0\3\56\1\332\17\56\15\0\1\56\1\0\4\56"+
    "\2\0\16\56\1\333\4\56\15\0\1\56\1\0\4\56"+
    "\2\0\1\56\1\334\21\56\15\0\1\56\1\0\4\56"+
    "\2\0\17\56\1\335\3\56\15\0\1\56\1\0\4\56"+
    "\2\0\3\56\1\336\17\56\15\0\1\56\1\0\4\56"+
    "\2\0\15\56\1\337\5\56\15\0\1\56\1\0\4\56"+
    "\2\0\16\56\1\340\4\56\15\0\1\56\1\0\4\56"+
    "\2\0\17\56\1\341\3\56\15\0\1\56\1\0\4\56"+
    "\2\0\4\56\1\342\16\56\15\0\1\56\1\0\4\56"+
    "\2\0\3\56\1\343\17\56\13\0\1\101\1\0\1\101"+
    "\1\0\5\101\1\0\17\101\1\344\3\101\13\0\1\101"+
    "\1\0\1\101\1\0\5\101\1\0\3\101\1\345\17\101"+
    "\13\0\1\101\1\0\1\101\1\0\5\101\1\0\15\101"+
    "\1\346\5\101\13\0\1\101\1\0\1\101\1\0\5\101"+
    "\1\0\3\101\1\233\17\101\15\0\1\14\1\0\4\14"+
    "\2\0\16\14\1\347\4\14\15\0\1\14\1\0\2\14"+
    "\1\350\1\14\2\0\23\14\15\0\1\14\1\0\4\14"+
    "\2\0\17\14\1\351\3\14\15\0\1\14\1\0\4\14"+
    "\2\0\22\14\1\352\15\0\1\14\1\0\4\14\2\0"+
    "\15\14\1\353\5\14\15\0\1\14\1\0\4\14\2\0"+
    "\17\14\1\354\3\14\15\0\1\14\1\0\4\14\2\0"+
    "\14\14\1\355\6\14\15\0\1\14\1\0\4\14\2\0"+
    "\7\14\1\356\13\14\15\0\1\14\1\0\4\14\2\0"+
    "\3\14\1\357\17\14\15\0\1\14\1\0\4\14\2\0"+
    "\16\14\1\360\4\14\13\0\1\131\1\0\1\42\1\0"+
    "\4\42\2\0\16\42\1\361\4\42\13\0\1\131\1\0"+
    "\1\42\1\0\2\42\1\362\1\42\2\0\23\42\13\0"+
    "\1\131\1\0\1\42\1\0\4\42\2\0\17\42\1\363"+
    "\3\42\13\0\1\131\1\0\1\42\1\0\4\42\2\0"+
    "\22\42\1\364\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\15\42\1\365\5\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\17\42\1\366\3\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\14\42\1\367\6\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\7\42"+
    "\1\370\13\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\3\42\1\371\17\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\16\42\1\372\4\42\15\0\1\56"+
    "\1\0\4\56\2\0\16\56\1\373\4\56\15\0\1\56"+
    "\1\0\2\56\1\374\1\56\2\0\23\56\15\0\1\56"+
    "\1\0\4\56\2\0\17\56\1\375\3\56\15\0\1\56"+
    "\1\0\4\56\2\0\22\56\1\376\15\0\1\56\1\0"+
    "\4\56\2\0\15\56\1\377\5\56\15\0\1\56\1\0"+
    "\4\56\2\0\17\56\1\u0100\3\56\15\0\1\56\1\0"+
    "\4\56\2\0\14\56\1\u0101\6\56\15\0\1\56\1\0"+
    "\4\56\2\0\7\56\1\u0102\13\56\15\0\1\56\1\0"+
    "\4\56\2\0\3\56\1\u0103\17\56\15\0\1\56\1\0"+
    "\4\56\2\0\16\56\1\u0104\4\56\13\0\1\101\1\0"+
    "\1\101\1\0\5\101\1\0\22\101\1\u0105\13\0\1\101"+
    "\1\0\1\101\1\0\5\101\1\0\15\101\1\303\5\101"+
    "\13\0\1\101\1\0\1\101\1\0\5\101\1\0\17\101"+
    "\1\233\3\101\15\0\1\14\1\0\4\14\2\0\16\14"+
    "\1\u0106\4\14\15\0\1\14\1\0\4\14\2\0\1\u0107"+
    "\22\14\15\0\1\14\1\0\4\14\2\0\13\14\1\u0108"+
    "\7\14\15\0\1\14\1\0\3\14\1\u0109\2\0\23\14"+
    "\15\0\1\14\1\0\4\14\2\0\16\14\1\u010a\4\14"+
    "\15\0\1\14\1\0\4\14\2\0\1\u010b\22\14\15\0"+
    "\1\14\1\0\4\14\2\0\13\14\1\u010c\7\14\13\0"+
    "\1\131\1\0\1\42\1\0\4\42\2\0\16\42\1\u010d"+
    "\4\42\13\0\1\131\1\0\1\42\1\0\4\42\2\0"+
    "\1\u010e\22\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\13\42\1\u010f\7\42\13\0\1\131\1\0\1\42"+
    "\1\0\3\42\1\u0110\2\0\23\42\13\0\1\131\1\0"+
    "\1\42\1\0\4\42\2\0\16\42\1\u0111\4\42\13\0"+
    "\1\131\1\0\1\42\1\0\4\42\2\0\1\u0112\22\42"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\13\42"+
    "\1\u0113\7\42\15\0\1\56\1\0\4\56\2\0\16\56"+
    "\1\u0114\4\56\15\0\1\56\1\0\4\56\2\0\1\u0115"+
    "\22\56\15\0\1\56\1\0\4\56\2\0\13\56\1\u0116"+
    "\7\56\15\0\1\56\1\0\3\56\1\u0117\2\0\23\56"+
    "\15\0\1\56\1\0\4\56\2\0\16\56\1\u0118\4\56"+
    "\15\0\1\56\1\0\4\56\2\0\1\u0119\22\56\15\0"+
    "\1\56\1\0\4\56\2\0\13\56\1\u011a\7\56\13\0"+
    "\1\101\1\0\1\101\1\0\3\101\1\u011b\1\101\1\0"+
    "\23\101\15\0\1\14\1\0\4\14\2\0\7\14\1\u011c"+
    "\13\14\15\0\1\14\1\0\4\14\2\0\11\14\1\u011d"+
    "\11\14\15\0\1\14\1\0\4\14\2\0\15\14\1\u011e"+
    "\5\14\15\0\1\14\1\0\4\14\2\0\22\14\1\u011f"+
    "\15\0\1\14\1\0\4\14\2\0\1\14\1\u0120\21\14"+
    "\15\0\1\14\1\0\4\14\2\0\12\14\1\u0121\10\14"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\7\42"+
    "\1\u0122\13\42\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\11\42\1\u0123\11\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\15\42\1\u0124\5\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\22\42\1\u0125\13\0"+
    "\1\131\1\0\1\42\1\0\4\42\2\0\1\42\1\u0126"+
    "\21\42\13\0\1\131\1\0\1\42\1\0\4\42\2\0"+
    "\12\42\1\u0127\10\42\15\0\1\56\1\0\4\56\2\0"+
    "\7\56\1\u0128\13\56\15\0\1\56\1\0\4\56\2\0"+
    "\11\56\1\u0129\11\56\15\0\1\56\1\0\4\56\2\0"+
    "\15\56\1\u012a\5\56\15\0\1\56\1\0\4\56\2\0"+
    "\22\56\1\u012b\15\0\1\56\1\0\4\56\2\0\1\56"+
    "\1\u012c\21\56\15\0\1\56\1\0\4\56\2\0\12\56"+
    "\1\u012d\10\56\13\0\1\101\1\0\1\101\1\0\5\101"+
    "\1\0\22\101\1\u012e\15\0\1\14\1\0\4\14\2\0"+
    "\21\14\1\u012f\1\14\15\0\1\14\1\0\4\14\2\0"+
    "\3\14\1\u0130\17\14\15\0\1\14\1\0\4\14\2\0"+
    "\22\14\1\u0131\15\0\1\14\1\0\4\14\2\0\14\14"+
    "\1\u0132\6\14\15\0\1\14\1\0\4\14\2\0\3\14"+
    "\1\u0133\17\14\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\21\42\1\u0134\1\42\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\3\42\1\u0135\17\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\22\42\1\u0136\13\0"+
    "\1\131\1\0\1\42\1\0\4\42\2\0\14\42\1\u0137"+
    "\6\42\13\0\1\131\1\0\1\42\1\0\4\42\2\0"+
    "\3\42\1\u0138\17\42\15\0\1\56\1\0\4\56\2\0"+
    "\21\56\1\u0139\1\56\15\0\1\56\1\0\4\56\2\0"+
    "\3\56\1\u013a\17\56\15\0\1\56\1\0\4\56\2\0"+
    "\22\56\1\u013b\15\0\1\56\1\0\4\56\2\0\14\56"+
    "\1\u013c\6\56\15\0\1\56\1\0\4\56\2\0\3\56"+
    "\1\u013d\17\56\13\0\1\101\1\0\1\101\1\0\5\101"+
    "\1\0\14\101\1\u013e\6\101\15\0\1\14\1\0\4\14"+
    "\2\0\3\14\1\u013f\17\14\15\0\1\14\1\0\4\14"+
    "\2\0\3\14\1\u0140\17\14\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\3\42\1\u0141\17\42\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\3\42\1\u0142\17\42"+
    "\15\0\1\56\1\0\4\56\2\0\3\56\1\u0143\17\56"+
    "\15\0\1\56\1\0\4\56\2\0\3\56\1\u0144\17\56"+
    "\13\0\1\101\1\0\1\101\1\0\5\101\1\0\3\101"+
    "\1\303\17\101\15\0\1\14\1\0\1\14\1\u0145\2\14"+
    "\2\0\23\14\13\0\1\131\1\0\1\42\1\0\1\42"+
    "\1\u0146\2\42\2\0\23\42\15\0\1\56\1\0\1\56"+
    "\1\u0147\2\56\2\0\23\56\15\0\1\14\1\0\4\14"+
    "\2\0\12\14\1\u0148\10\14\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\12\42\1\u0149\10\42\15\0\1\56"+
    "\1\0\4\56\2\0\12\56\1\u014a\10\56\15\0\1\14"+
    "\1\0\4\14\2\0\10\14\1\u014b\12\14\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\10\42\1\u014c\12\42"+
    "\15\0\1\56\1\0\4\56\2\0\10\56\1\u014d\12\56"+
    "\15\0\1\14\1\0\4\14\2\0\7\14\1\u014e\13\14"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\7\42"+
    "\1\u014f\13\42\15\0\1\56\1\0\4\56\2\0\7\56"+
    "\1\u0150\13\56\15\0\1\14\1\0\4\14\2\0\12\14"+
    "\1\u0151\10\14\13\0\1\131\1\0\1\42\1\0\4\42"+
    "\2\0\12\42\1\u0152\10\42\15\0\1\56\1\0\4\56"+
    "\2\0\12\56\1\u0153\10\56\15\0\1\14\1\0\4\14"+
    "\2\0\7\14\1\u0154\13\14\13\0\1\131\1\0\1\42"+
    "\1\0\4\42\2\0\7\42\1\u0155\13\42\15\0\1\56"+
    "\1\0\4\56\2\0\7\56\1\u0156\13\56\15\0\1\14"+
    "\1\0\4\14\2\0\12\14\1\u0157\10\14\13\0\1\131"+
    "\1\0\1\42\1\0\4\42\2\0\12\42\1\u0158\10\42"+
    "\15\0\1\56\1\0\4\56\2\0\12\56\1\u0159\10\56"+
    "\15\0\1\14\1\0\4\14\2\0\5\14\1\u015a\15\14"+
    "\13\0\1\131\1\0\1\42\1\0\4\42\2\0\5\42"+
    "\1\u015b\15\42\15\0\1\56\1\0\4\56\2\0\5\56"+
    "\1\u015c\15\56\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12120];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\21\1\1\11\5\1\1\11\30\1\1\11"+
    "\4\1\2\11\21\1\1\0\1\11\1\0\3\1\2\0"+
    "\u0103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AtomicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 36: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 37: break;
          case 3:
            { yybegin(YYINITIAL); return AtomicTypes.COMMENT;
            }
          // fall through
          case 38: break;
          case 4:
            { return AtomicTypes.IDENTIFIER;
            }
          // fall through
          case 39: break;
          case 5:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 40: break;
          case 6:
            { return AtomicTypes.COLON;
            }
          // fall through
          case 41: break;
          case 7:
            { yybegin(YYINITIAL); return AtomicTypes.IDENTIFIER;
            }
          // fall through
          case 42: break;
          case 8:
            { yybegin(YYINITIAL); return AtomicTypes.NAMESPACE_VALUE;
            }
          // fall through
          case 43: break;
          case 9:
            { return AtomicTypes.COMMENT;
            }
          // fall through
          case 44: break;
          case 10:
            { return AtomicTypes.HYPHEN;
            }
          // fall through
          case 45: break;
          case 11:
            { return AtomicTypes.IMPORT_PATH;
            }
          // fall through
          case 46: break;
          case 12:
            { return AtomicTypes.TAG_NAME;
            }
          // fall through
          case 47: break;
          case 13:
            { yybegin(IN_VALUE_NAME); return AtomicTypes.HYPHEN;
            }
          // fall through
          case 48: break;
          case 14:
            { yybegin(IN_VALUES); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 49: break;
          case 15:
            { yybegin(IN_VALUE_TYPE); return AtomicTypes.VALUE_NAME;
            }
          // fall through
          case 50: break;
          case 16:
            { yybegin(IN_VALUES); return AtomicTypes.COMMENT;
            }
          // fall through
          case 51: break;
          case 17:
            { return AtomicTypes.TYPE_REFERENCE;
            }
          // fall through
          case 52: break;
          case 18:
            { yypushback(1); yybegin(IN_VALUES);
            }
          // fall through
          case 53: break;
          case 19:
            { yybegin(YYINITIAL); return AtomicTypes.STRING;
            }
          // fall through
          case 54: break;
          case 20:
            { yybegin(YYINITIAL); return AtomicTypes.TYPE_REFERENCE;
            }
          // fall through
          case 55: break;
          case 21:
            { yybegin(IN_TAGS); return AtomicTypes.TAGS_KEYWORD;
            }
          // fall through
          case 56: break;
          case 22:
            { yybegin(YYINITIAL); return AtomicTypes.TRUE;
            }
          // fall through
          case 57: break;
          case 23:
            { yypushback(yylength()); yybegin(IN_VALUES);
            }
          // fall through
          case 58: break;
          case 24:
            { yybegin(YYINITIAL); return AtomicTypes.FALSE;
            }
          // fall through
          case 59: break;
          case 25:
            { yybegin(WAITING_VALUE); return AtomicTypes.HEADER_KEYWORD;
            }
          // fall through
          case 60: break;
          case 26:
            { yybegin(WAITING_VALUE); return AtomicTypes.UNSAFE_KEYWORD;
            }
          // fall through
          case 61: break;
          case 27:
            { yybegin(IN_VALUES); return AtomicTypes.VALUES_KEYWORD;
            }
          // fall through
          case 62: break;
          case 28:
            { yybegin(IN_IMPORTS); return AtomicTypes.IMPORTS_KEYWORD;
            }
          // fall through
          case 63: break;
          case 29:
            { yybegin(WAITING_VALUE); return AtomicTypes.SOLUTION_KEYWORD;
            }
          // fall through
          case 64: break;
          case 30:
            { yybegin(WAITING_VALUE); return AtomicTypes.CLASS_NAME_KEYWORD;
            }
          // fall through
          case 65: break;
          case 31:
            { yybegin(WAITING_VALUE); return AtomicTypes.DIRECTORY_KEYWORD;
            }
          // fall through
          case 66: break;
          case 32:
            { yybegin(WAITING_NAMESPACE); return AtomicTypes.NAMESPACE_KEYWORD;
            }
          // fall through
          case 67: break;
          case 33:
            { yybegin(WAITING_VALUE); return AtomicTypes.NAMESPACE_KEYWORD;
            }
          // fall through
          case 68: break;
          case 34:
            { yybegin(WAITING_VALUE); return AtomicTypes.ENTITY_TYPE_KEYWORD;
            }
          // fall through
          case 69: break;
          case 35:
            { yybegin(WAITING_VALUE); return AtomicTypes.AGGRESSIVE_INLINING_KEYWORD;
            }
          // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
